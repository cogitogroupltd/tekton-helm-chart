# https://hub.tekton.dev/tekton/task/kaniko
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "{{ include "generic.fullname" . }}-kaniko"
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds source into a container image using Google's kaniko tool.

    Kaniko doesn't depend on a Docker daemon and executes each
    command within a Dockerfile completely in userspace. This enables
    building container images in environments that can't easily or
    securely run a Docker daemon, such as a standard Kubernetes cluster.

  params:
  - name: DOCKER_IMAGE_TAG
    description: Tag (reference) of the image to build 
  - name: DOCKER_REGISTRY
    description: Name (reference) of the registry storing the image to build.
  - name: DOCKER_REPOSITORY
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    type: array
    default: []
  - name: BUILDER_IMAGE
    description: The image on which builds will run (default is v1.5.1)
    default: gcr.io/kaniko-project/executor:v1.7.0@sha256:8504bde9a9a8c9c4e9a4fe659703d265697a36ff13607b7669a4caa4407baa52
  workspaces:
  - name: source
    description: Holds the context and docker file
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
    mountPath: /kaniko/.docker
  - name: image-cache
    description: directory for loading image caches across builds
    optional: true
    mountPath: /cache
  results:
  - name: IMAGE-DIGEST
    description: Digest of the image just built.

  steps:
  - name: warm-cache
    image: gcr.io/kaniko-project/warmer
    args:
    - --cache-dir=/cache
    - --image=$(params.DOCKER_REGISTRY)/$(params.DOCKER_REPOSITORY)
    resources:
      limits:
        cpu: 2
        memory: 4096Mi
      requests:
        cpu: 1
        memory: 1048Mi
  - name: build-and-push
    workingDir: $(workspaces.source.path)
    image: $(params.BUILDER_IMAGE)
    args:
    - $(params.EXTRA_ARGS[*])
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.DOCKER_REGISTRY)/$(params.DOCKER_REPOSITORY):$(params.DOCKER_IMAGE_TAG)
    - --cache=true
    - --digest-file=/tekton/results/IMAGE-DIGEST
    - --cache-dir=/cache
    - --reproducible
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    securityContext:
      runAsUser: 0