secret_ssh_key:
secret_ssh_cred: ssh-key
secret_docker_conf: docker-config
docker_config_json: 
configmap_kube_conf: kube-config
secret_slack_webhook_uri: 

taskdefinitions:
  enabled: true
  serviceAccounts:
  - name: echo-pipeline-params
    yaml: |-
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        annotations:
          eks.amazonaws.com/role-arn: "arn:aws:iam::12345:role/production-task-execution-role"
        name: echo-pipeline-params
  tasks:
  - name: echo-pipeline-params # must be unique across all tasks and custom tasks defined in this override values
    clusterAdmin: false
    description: >-
      This task is global so can be called in any pipelines 
    podTemplate:
      nodeSelector:
        kubernetes.io/arch: arm64
    params:
    - name: deployment
      type: string
      value: "defaultdeploy"
    - name: tag
      type: string
      default: "master"
      value: "defaulttag"
    - name: arch
      type: string
      default: "arm64"
      value: "defaultarch"
    steps:
    - name: echo-pipeline-params
      image: docker.io/amazon/aws-cli:2.0.52@sha256:1506cec98a7101c935176d440a14302ea528b8f92fcaf4a6f1ea2d7ecef7edc4 #tag: 2.0.52 #image is huge
      script: |
        set -xe
        echo "tag= $(params.tag)"
        echo "arch= $(params.arch)"
        echo "deploy= $(params.deployment)"

pipelines:
  - name: dev 
    # WebHook config must use application/json as ContentType
    trigger:
      eventType: pull_request
      eventAction: "['opened','synchronize','reopened']"
      token: 
    taskdefinitions:
    - name: echo-pipeline-params # must be unique across all tasks and custom tasks defined in this override values
      params:
      - name: deployment
        value: "defaultdeploy"
      - name: tag
        value: "BLOOO"
      - name: arch
        value: "BLAH"
    custom:
      enabled: true
      serviceAccounts:
      - name: kubectl-get-pods
        yaml: |-
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: kubectl-get-pods
            namespace: tekton-pipelines
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "cluster-administrator-kubectl-get-pods"
          subjects:
            - kind: ServiceAccount
              name: "kubectl-get-pods"
              namespace: tekton-pipelines
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
      tasks:
      - name: kubectl-get-pods
        # clusterAdmin: true
        description: >-
          This task does a kubectl get pods 
          This task uses Incoming Webhooks of slack to send the message.
        podTemplate:
          nodeSelector:
            kubernetes.io/arch: arm64
        params:
        - name: deployment
          type: string
          value: "defaultdeploy"
        - name: tag
          type: string
          default: "master"
          value: "defaulttag"
        - name: arch
          type: string
          default: "arm64"
          value: "defaultarch"
        steps:
        - name: run-kubectl-get
          image: docker.io/amazon/aws-cli:2.0.52@sha256:1506cec98a7101c935176d440a14302ea528b8f92fcaf4a6f1ea2d7ecef7edc4 #tag: 2.0.52 #image is huge
          script: |
            set -xe
            cd /tmp
            rm -f /usr/local/bin/kubectl
            curl -LO "https://dl.k8s.io/release/v1.23.6/bin/linux/arm64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            chown root:root /usr/local/bin/kubectl
            kubectl get pods
  