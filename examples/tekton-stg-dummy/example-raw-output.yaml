---
# Source: pipeline/templates/kubectl-restart-deployment/serviceAccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "template-pipeline-tekton-default-sa"
---
# Source: pipeline/templates/triggers/role.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "template-pipeline-tekton-triggers-sa"
  namespace: default
---
# Source: pipeline/templates/git-clone/secrets.yml
kind: Secret
apiVersion: v1
metadata:
  name: "template-pipeline-ssh-key"
  namespace: default
data:
  id_rsa: 
---
# Source: pipeline/templates/kaniko-build/secret-docker-config.yml
apiVersion: v1
kind: Secret
type: generic
metadata:
  name: "template-pipeline-docker-config"
  namespace: default
data:
  config.json: 
---
# Source: pipeline/templates/send-to-webhook-slack/secret-webhook-uri.yaml
apiVersion: v1
kind: Secret
type: generic
metadata:
  name: "template-pipeline-webhook-secret"
  namespace: default
data:
  url: 
---
# Source: pipeline/templates/kubectl-restart-deployment/cm-kubeconfig.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "template-pipeline-kube-config"
  namespace: default
data:
  kubeconfig: |-
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: DUMMY
        server: https://A5494263581FF77B9E1B5EDA88421698.gr7.eu-west-2.eks.amazonaws.com
      name: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
    contexts:
    - context:
        cluster: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
        namespace: default
        user: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
      name: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
    current-context: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
    kind: Config
    preferences: {}
    users:
    - name: arn:aws:eks:eu-west-2:676312345602:cluster/staging-eks-private
      user:
        exec:
          apiVersion: client.authentication.k8s.io/v1alpha1
          args:
          - --region
          - eu-west-2
          - eks
          - get-token
          - --cluster-name
          - staging-eks-private
          command: aws
          interactiveMode: IfAvailable
          provideClusterInfo: false
---
# Source: pipeline/templates/triggers/role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "template-pipeline-tekton-triggers-cr"
rules:
- apiGroups:
  - tekton.dev
  resources:
  - eventlisteners
  - triggerbindings
  - triggertemplates
  - pipelineresources
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - pipelineresources
  verbs:
  - create
- apiGroups:
  - triggers.tekton.dev
  resources:
  - clusterinterceptors
  - clustertriggerbindings
  verbs:
  - get
  - list
  - watch
---
# Source: pipeline/templates/kubectl-restart-deployment/roleBinding.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "cluster-administrator-default-template"
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: pipeline/templates/triggers/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "template-pipeline-tekton-triggers-crb"
subjects:
  - kind: ServiceAccount
    name: "template-pipeline-tekton-triggers-sa"
    namespace: default
roleRef:
  kind: ClusterRole
  name: "template-pipeline-tekton-triggers-cr"
  apiGroup: rbac.authorization.k8s.io
---
# Source: pipeline/templates/triggers/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "template-pipeline-tekton-triggers-role"
  namespace: default
rules:
- apiGroups:
  - tekton.dev
  resources:
  - eventlisteners
  - triggerbindings
  - triggertemplates
  - pipelineresources
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - pipelineresources
  verbs:
  - create
- apiGroups:
  - triggers.tekton.dev
  resources:
  - triggerbindings
  - triggers
  - triggertemplates
  - eventlisteners
  - clusterinterceptors
  - clustertriggerbindings
  verbs:
  - get
  - list
  - watch
---
# Source: pipeline/templates/triggers/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "template-pipeline-tekton-triggers-rb"
  namespace: default
subjects:
- kind: ServiceAccount
  name: "template-pipeline-tekton-triggers-sa"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "template-pipeline-tekton-triggers-role"
---
# Source: pipeline/templates/triggers/eventListener.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: prod-listener
  namespace: default
spec:
  serviceAccountName: "template-pipeline-tekton-triggers-sa"
  triggers:
  - bindings:
      - ref: prod
    template:
      ref: prod
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: dev-listener
  namespace: default
spec:
  serviceAccountName: "template-pipeline-tekton-triggers-sa"
  triggers:
  - bindings:
      - ref: dev
    template:
      ref: dev
---
# Source: pipeline/templates/pipeline.yml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: prod
  namespace: default
spec:
  params:
  - name: git_revision
    description: The git revision
  - name: git_revision_owner
    description: The owner of the git revision
  - name: git_repository_name
    description: The name of the git repository
  workspaces:
    - name: git-pvc
    - name: ssh-creds
    - name: docker-creds-cm
    - name: kubeconfig
  tasks:
    - name: started-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: message
        value: "Started pipeline"
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "prod"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
    - name: clone-git-repo
      taskRef:
        name: "template-pipeline-git-clone"
      params:
      - name: url
        value: git@github.com:dockerised/docker-anyconnect-vpn.git 
      - name: revision
        value: $(params.git_revision)
      workspaces:
      - name: ssh-directory
        workspace: ssh-creds
      - name: output
        workspace: git-pvc
      runAfter:
        - started-webhook
    - name: build-and-push
      taskRef:
        name: "template-pipeline-kaniko"
      params:
        - name: IMAGE
          value: george7522/docker-anyconnect-vpn:$(params.git_revision)
      runAfter:
        - clone-git-repo
      workspaces:
      - name: source
        workspace: git-pvc
      - name: dockerconfig
        workspace: docker-creds-cm
    - name: mid-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "prod"
      - name: message
        value: "Pushed george7522/docker-anyconnect-vpn:$(params.git_revision)"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
      runAfter:
        - build-and-push
    - name: update-image
      taskRef:
        name: kubectl-restart-deployment
      params:
        - name: deployment
          value: nginx-app
        - name: namespace
          value: default
      runAfter:
        - build-and-push
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig
    - name: end-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "prod"
      - name: message
        value: "Deployed default/nginx-app"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
      runAfter:
        - update-image
---
# Source: pipeline/templates/pipeline.yml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: dev
  namespace: default
spec:
  params:
  - name: git_revision
    description: The git revision
  - name: git_revision_owner
    description: The owner of the git revision
  - name: git_repository_name
    description: The name of the git repository
  workspaces:
    - name: git-pvc
    - name: ssh-creds
    - name: docker-creds-cm
    - name: kubeconfig
  tasks:
    - name: started-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: message
        value: "Started pipeline"
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "dev"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
    - name: clone-git-repo
      taskRef:
        name: "template-pipeline-git-clone"
      params:
      - name: url
        value: git@github.com:dockerised/docker-anyconnect-vpn.git 
      - name: revision
        value: $(params.git_revision)
      workspaces:
      - name: ssh-directory
        workspace: ssh-creds
      - name: output
        workspace: git-pvc
      runAfter:
        - started-webhook
    - name: build-and-push
      taskRef:
        name: "template-pipeline-kaniko"
      params:
        - name: IMAGE
          value: george7522/docker-anyconnect-vpn:$(params.git_revision)
      runAfter:
        - clone-git-repo
      workspaces:
      - name: source
        workspace: git-pvc
      - name: dockerconfig
        workspace: docker-creds-cm
    - name: mid-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "dev"
      - name: message
        value: "Pushed george7522/docker-anyconnect-vpn:$(params.git_revision)"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
      runAfter:
        - build-and-push
    - name: update-image
      taskRef:
        name: kubectl-restart-deployment
      params:
        - name: deployment
          value: nginx-app
        - name: namespace
          value: default
      runAfter:
        - build-and-push
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig
    - name: end-webhook
      taskRef:
        name: send-to-webhook-slack
      params:
      - name: webhook-secret
        value: "template-pipeline-webhook-secret"
      - name: git_revision_owner
        value: $(params.git_revision_owner)
      - name: git_repository_name
        value: $(params.git_repository_name)
      - name: helm_release_name
        value: "template-pipeline"
      - name: pipeline_name
        value: "dev"
      - name: message
        value: "Deployed default/nginx-app"
      - name: bot-name
        value: "*TEKTON-stg-dummy-test*"
      - name: icon-emoji
        value: https://tekton.dev/favicons/favicon.ico
      runAfter:
        - update-image
---
# Source: pipeline/templates/git-clone/task.yml
# https://hub.tekton.dev/tekton/task/git-clone
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "template-pipeline-git-clone"
  namespace: default
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
    - name: revision
      description: Revision of git repository pulled down (branch, tag, sha, ref, etc...).
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
        printf "%s" "${PARAM_REVISION}" > "$(results.revision.path)"
---
# Source: pipeline/templates/kaniko-build/task.yml
# https://hub.tekton.dev/tekton/task/kaniko
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "template-pipeline-kaniko"
  namespace: default
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds source into a container image using Google's kaniko tool.

    Kaniko doesn't depend on a Docker daemon and executes each
    command within a Dockerfile completely in userspace. This enables
    building container images in environments that can't easily or
    securely run a Docker daemon, such as a standard Kubernetes cluster.

  params:
  - name: IMAGE
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    type: array
    default: []
  - name: BUILDER_IMAGE
    description: The image on which builds will run (default is v1.5.1)
    default: gcr.io/kaniko-project/executor:v1.7.0@sha256:8504bde9a9a8c9c4e9a4fe659703d265697a36ff13607b7669a4caa4407baa52
  workspaces:
  - name: source
    description: Holds the context and docker file
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
    mountPath: /kaniko/.docker
  results:
  - name: IMAGE-DIGEST
    description: Digest of the image just built.

  steps:
  - name: build-and-push
    workingDir: $(workspaces.source.path)
    image: $(params.BUILDER_IMAGE)
    args:
    - $(params.EXTRA_ARGS[*])
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE)
    - --cache=true
    - --digest-file=/tekton/results/IMAGE-DIGEST
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    securityContext:
      runAsUser: 0
---
# Source: pipeline/templates/kubectl-restart-deployment/task.yml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kubectl-restart-deployment
  namespace: default
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: CLI, kubectl
    tekton.dev/displayName: "kubernetes actions"
    tekton.dev/platforms: "linux/amd64"
spec:
  workspaces:
    - name: kubeconfig-dir
      optional: true
  params:
    - name: deployment
      type: string
    - name: namespace
      type: string
      default: "default"
    - name: arch
      type: string
      default: "arm64"
  steps:
    - name: get-kubectl-and-run-command
      image: docker.io/amazon/aws-cli:2.0.52@sha256:1506cec98a7101c935176d440a14302ea528b8f92fcaf4a6f1ea2d7ecef7edc4 #tag: 2.0.52 #image is huge
      script: |
        cd /tmp
        rm -f /usr/local/bin/kubectl
        curl -LO "https://dl.k8s.io/release/v1.23.6/bin/linux/arm64/kubectl"
        chmod +x ./kubectl
        mv ./kubectl /usr/local/bin/kubectl
        chown root: /usr/local/bin/kubectl
        kubectl version
        kubectl rollout restart deployment/$(params.deployment) --namespace $(params.namespace)
        kubectl rollout status deployment/$(params.deployment) --namespace $(params.namespace)
---
# Source: pipeline/templates/send-to-webhook-slack/task.yml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: send-to-webhook-slack
  namespace: default
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Messaging
    tekton.dev/tags: messaging
    tekton.dev/displayName: "Send message to Slack Channel"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    These tasks post a simple message to a slack channel.

    This task uses Incoming Webhooks of slack to send the message.

  params:
  - name: webhook-secret
    type: string
    description: secret name of the slack app webhook URL (key is url)
  - name: message
    type: string
    description: plain text message
  - name: log_level
    type: string
    description: plain text for log_level verbosity eg. INFO, WARNING, ERROR
    default: 'INFO'
  - name: git_revision_owner
    type: string
    description: The owner of the git revision
  - name: helm_release_name
    type: string
    description: The name of the helm release for the pipeline
  - name: pipeline_name
    type: string
    description: The name of the Tekton pipeline
  - name: git_repository_name
    type: string
    description: The name of the git repository
  - name: bot-name
    type: string
    description: plain text message
    default: 'Tekton Bot'
  - name: icon-emoji
    type: string
    description: plain text message
    default: ':robot_face:'
  steps:
  - name: post
    image: docker.io/curlimages/curl:7.70.0@sha256:031df77a11e5edded840bc761a845eab6e3c2edee22669fb8ad6d59484b6a1c4 #tag: 7.70.0
    script: |
      #!/usr/bin/env sh
      MESSAGE=$(echo "$(date '+%Y-%m-%d-%H:%M%:S') ${LOG_LEVEL} [${GIT_REVISION_OWNER}] [${HELM_RELEASE_NAME}] [${GIT_REPOSITORY_NAME}] [${PIPELINE_NAME}] ${MESSAGE}" | sed -e 's/\"/\\\\"/g')
      BOTNAME=$(echo "${BOTNAME}" | sed -e 's/\"/\\\\"/g')
      JSON="{\"text\": \"${MESSAGE}\", \"username\": \"${BOTNAME}\", \"icon_emoji\": \"${EMOJI}\"}"
      curl -X POST -H 'Content-Type: application/json' --data "${JSON}" "${URL}"
    env:
    - name: URL
      valueFrom:
        secretKeyRef:
          name: $(params.webhook-secret)
          key: url
    - name: MESSAGE
      value: $(params.message)
    - name: BOTNAME
      value: $(params.bot-name)
    - name: GIT_REVISION_OWNER
      value: $(params.git_revision_owner)
    - name: PIPELINE_NAME
      value: $(params.pipeline_name)
    - name: GIT_REPOSITORY_NAME
      value: $(params.git_repository_name)
    - name: HELM_RELEASE_NAME
      value: $(params.helm_release_name)
    - name: EMOJI
      value: $(params.icon-emoji)
    - name: LOG_LEVEL
      value: $(params.log_level)
---
# Source: pipeline/templates/triggers/trigger.yaml
apiVersion: triggers.tekton.dev/v1alpha1
kind: Trigger
metadata:
  name: prod
  namespace: default
spec:
  interceptors:
    - ref:
        name: "cel"
      params:
        - name: "filter"
          value: "header.match('X-GitHub-Event', 'pull_request')"
        - name: "overlays"
          value:
            - key: extensions.truncated_sha
              expression: "body.pull_request.head.sha.truncate(7)"
  bindings:
  - ref: prod
  template:
    ref: prod
---
# Source: pipeline/templates/triggers/trigger.yaml
apiVersion: triggers.tekton.dev/v1alpha1
kind: Trigger
metadata:
  name: dev
  namespace: default
spec:
  interceptors:
    - ref:
        name: "cel"
      params:
        - name: "filter"
          value: "header.match('X-GitHub-Event', 'pull_request')"
        - name: "overlays"
          value:
            - key: extensions.truncated_sha
              expression: "body.pull_request.head.sha.truncate(7)"
  bindings:
  - ref: dev
  template:
    ref: dev
---
# Source: pipeline/templates/triggers/triggerBinding.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: prod
  namespace: default
spec:
  params:
  - name: git_revision
    value: $(body.pull_request.head.sha)
  - name: namespace
    value: default
  - name: git_source
    value: $(body.repository.html_url)
  - name: git_repository_name
    value: $(body.repository.name)
  - name: git_revision_owner
    value: $(body.pull_request.head.user.login)
---
# Source: pipeline/templates/triggers/triggerBinding.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: dev
  namespace: default
spec:
  params:
  - name: git_revision
    value: $(body.pull_request.head.sha)
  - name: namespace
    value: default
  - name: git_source
    value: $(body.repository.html_url)
  - name: git_repository_name
    value: $(body.repository.name)
  - name: git_revision_owner
    value: $(body.pull_request.head.user.login)
---
# Source: pipeline/templates/triggers/triggerTemplate.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: prod
  namespace: 
spec:
  params:
  - name: git_revision
    description: The git revision
  - name: git_revision_owner
    description: The owner of the git revision
  - name: git_repository_name
    description: The name of the git repository
  - name: url
    description: The git repository url
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: prod-$(uid)
    spec:
      pipelineRef:
        name: prod
      params:
      - name: git_revision
        value: $(tt.params.git_revision)
      - name: git_revision_owner
        value: $(tt.params.git_revision_owner)
      - name: git_repository_name
        value: $(tt.params.git_repository_name)
      workspaces:
        - name: git-pvc
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 10Gi
        - name: ssh-creds
          secret:
            secretName: "template-pipeline-ssh-key"
        - name: docker-creds-cm
          secret:
            secretName: "template-pipeline-docker-config"
        - name: kubeconfig
          configMap:
            name: "template-pipeline-kube-config"
---
# Source: pipeline/templates/triggers/triggerTemplate.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: dev
  namespace: 
spec:
  params:
  - name: git_revision
    description: The git revision
  - name: git_revision_owner
    description: The owner of the git revision
  - name: git_repository_name
    description: The name of the git repository
  - name: url
    description: The git repository url
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: dev-$(uid)
    spec:
      pipelineRef:
        name: dev
      params:
      - name: git_revision
        value: $(tt.params.git_revision)
      - name: git_revision_owner
        value: $(tt.params.git_revision_owner)
      - name: git_repository_name
        value: $(tt.params.git_repository_name)
      workspaces:
        - name: git-pvc
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 10Gi
        - name: ssh-creds
          secret:
            secretName: "template-pipeline-ssh-key"
        - name: docker-creds-cm
          secret:
            secretName: "template-pipeline-docker-config"
        - name: kubeconfig
          configMap:
            name: "template-pipeline-kube-config"
